package com.ingeniouscontraptions.octopainting.ui;

import com.ingeniouscontraptions.octopainting.Octopainting;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;

public class OctopaintingPanel extends javax.swing.JPanel {

    /**
     * Creates new form OctopaintingPanel
     */
    public OctopaintingPanel(Octopainting octopainting) {
        this.octopainting = octopainting;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        exportRegistrationsLabel = new javax.swing.JLabel();
        exportRegistrationsButton = new javax.swing.JButton();
        exportBlankLabel = new javax.swing.JLabel();
        exportBlankButton = new javax.swing.JButton();

        exportRegistrationsLabel.setText("Exporter les inscriptions en PDF");

        exportRegistrationsButton.setText("Exporter");
        exportRegistrationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportRegistrationsButtonActionPerformed(evt);
            }
        });

        exportBlankLabel.setText("Exporter un formulaire vierge en PDF");

        exportBlankButton.setText("Exporter");
        exportBlankButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBlankButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(exportRegistrationsLabel)
                                        .addComponent(exportBlankLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(exportRegistrationsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                                        .addComponent(exportBlankButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(exportRegistrationsButton)
                                        .addComponent(exportRegistrationsLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(exportBlankButton)
                                        .addComponent(exportBlankLabel))
                                .addContainerGap(220, Short.MAX_VALUE))
        );
    }// </editor-fold>

    private void exportRegistrationsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JFileChooser tsvFileChooser = new JFileChooser();
            tsvFileChooser.setFileFilter(new FilenameFilter("TSV"));
            if (tsvFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                JFileChooser pdfFileChooser = new JFileChooser();
                pdfFileChooser.setFileFilter(new FilenameFilter("PDF"));
                if (pdfFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                    octopainting.exportRegistrations(tsvFileChooser.getSelectedFile().toPath(), pdfFileChooser.getSelectedFile().toPath());
                    JOptionPane.showMessageDialog(OctopaintingPanel.this, String.format("Le fichier %s a été exporté.", pdfFileChooser.getSelectedFile().getName()), "Terminé", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(OctopaintingPanel.this, stackTraceToString(ex), ex.getMessage(), JOptionPane.ERROR_MESSAGE);
        }
    }

    private void exportBlankButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FilenameFilter("PDF"));
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                octopainting.exportBlank(fileChooser.getSelectedFile().toPath());
                JOptionPane.showMessageDialog(OctopaintingPanel.this, String.format("File %s has been exported.", fileChooser.getSelectedFile().getName()), "Done", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(OctopaintingPanel.this, stackTraceToString(ex), ex.getMessage(), JOptionPane.ERROR_MESSAGE);
        }
    }

    private String stackTraceToString(Exception ex) {
        StringWriter writer = new StringWriter();
        ex.printStackTrace(new PrintWriter(writer));
        return writer.toString();
    }

    // Variables declaration - do not modify
    private javax.swing.JButton exportBlankButton;
    private javax.swing.JLabel exportBlankLabel;
    private javax.swing.JButton exportRegistrationsButton;
    private javax.swing.JLabel exportRegistrationsLabel;
    // End of variables declaration
    private Octopainting octopainting;
}

class FilenameFilter extends FileFilter {

    private final String extension;

    public FilenameFilter(String extension) {
        this.extension = extension;
    }

    @Override
    public boolean accept(File f) {
        return f.isDirectory() || f.getName().toUpperCase().endsWith(String.format(".%s", extension.toUpperCase()));
    }

    @Override
    public String getDescription() {
        return String.format("Fichiers %s", extension.toUpperCase());
    }

}
